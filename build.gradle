/*
 * This file is part of MystudiesMyteaching application.
 *
 * MystudiesMyteaching application is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MystudiesMyteaching application is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MystudiesMyteaching application.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id 'com.gorylenko.gradle-git-properties' version '1.4.17'
    id 'net.ltgt.errorprone' version '0.6.1'
    id 'net.researchgate.release' version '2.6.0'
    id 'org.springframework.boot' version '2.1.2.RELEASE'
    id 'java'
    id 'maven-publish'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id 'org.sonarqube' version '2.6.2'
    id "io.github.kobylynskyi.graphql.codegen" version "3.0.0"
}

apply plugin: 'io.spring.dependency-management'

sourceCompatibility=11
targetCompatibility=11

def mainClass = 'fi.helsinki.opintoni.Application'

bootJar {
    mainClassName = mainClass
}

bootRun {
    main = project.properties['mainClass'] ?: mainClass
// jvmArgs=["-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=localhost:5005"]
}

bootJar {
    launchScript()
}

checkstyle {
    configDir = rootProject.file('gradle-config/checkstyle')
    toolVersion = '8.12'
    checkstyleMain.source = "src/main/java"
}

sonarqube {
    properties {
        property "sonar.projectKey", "mystudies-myteaching-backend"
        property "sonar.projectName", "mystudies-myteaching-backend"
    }
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

apply from: 'liquibase.gradle'

configurations {
    providedRuntime
}

if(hasProperty("opintoni_artifactory_base_url")) {
    repositories {
        maven {
            url "${opintoni_artifactory_base_url}/remote-repos/"
        }
    }
} else {
    repositories {
        mavenLocal()
        jcenter()
    }
}

configurations.all {
  all*.exclude group: "commons-logging", module: "commons-logging"
  all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
  all*.exclude group: "org.slf4j", module: "log4j-over-slf4j"
  all*.exclude group: "org.apache.tomcat", module: "tomcat-el-api"
  all*.exclude group: "org.apache.tomcat", module: "tomcat-util"
  all*.exclude group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket"
  all*.exclude group: "javax.el", module: "el-api"
}

dependencies {
    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: dropwizard_metrics_version
    compile group: 'io.dropwizard.metrics', name: 'metrics-ehcache', version: dropwizard_metrics_version
    compile group: 'io.dropwizard.metrics', name: 'metrics-graphite', version: dropwizard_metrics_version
    compile group: 'io.dropwizard.metrics', name: 'metrics-jvm', version: dropwizard_metrics_version
    compile group: 'io.dropwizard.metrics', name: 'metrics-servlet', version: dropwizard_metrics_version
    compile group: 'io.dropwizard.metrics', name: 'metrics-json', version: dropwizard_metrics_version
    compile(group: 'io.dropwizard.metrics', name: 'metrics-servlets', version: dropwizard_metrics_version) {
        exclude(module: 'metrics-healthchecks')
    }
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-json-org', version: jackson_version
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hppc', version: jackson_version
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: jackson_version
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate5', version: jackson_version
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: jackson_version
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jackson_version

    compile group: 'com.ryantenney.metrics', name: 'metrics-spring', version: metrics_spring_version
    compile(group: 'com.zaxxer', name: 'HikariCP', version: hikari_version) {
        exclude(module: 'tools')
    }
    compile group: 'org.apache.commons', name: 'commons-lang3', version: commons_lang_version
    compile group: 'commons-io', name: 'commons-io', version: commons_io_version
    compile group: 'javax.inject', name: 'javax.inject', version: javax_inject_version
    compile group: 'javax.transaction', name: 'javax.transaction-api', version: javax_transaction_version
    compile group: 'joda-time', name: 'joda-time', version: joda_time_version
    compile group: 'joda-time', name: 'joda-time-hibernate', version: joda_time_hibernate_version
    compile group: 'org.apache.geronimo.javamail', name: 'geronimo-javamail_1.4_mail', version: geronimo_javamail_1_4_mail_version
    compile (group: 'org.hibernate', name: 'hibernate-core', version: hibernate_entitymanager_version) {
        exclude(group: 'dom4j', module: 'dom4j')
    }
    compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: hibernate_entitymanager_version
    compile group: 'dom4j', name: 'dom4j', version: dom4j_version
    compile group: 'org.hibernate', name: 'hibernate-envers', version: hibernate_entitymanager_version
    compile group: 'org.hibernate', name: 'hibernate-ehcache', version: hibernate_entitymanager_version
    compile group: 'org.hibernate', name: 'hibernate-validator', version: hibernate_validator_version
    compile group: 'org.jadira.usertype', name: 'usertype.core', version: usertype_core_version
    compile group: 'org.jadira.usertype', name: 'usertype.extended', version: usertype_extended_version
    compile (group: 'org.liquibase', name: 'liquibase-core', version: liquibase_core_version) {
        exclude(module: 'jetty-servlet')
    }
    compile group: 'com.mattbertolini', name: 'liquibase-slf4j', version: liquibase_slf4j_version
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: spring_boot_version
    compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: spring_boot_version
    compile group: 'org.springframework.boot', name: 'spring-boot-loader-tools', version: spring_boot_version
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: spring_boot_version
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: spring_boot_version
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: spring_boot_version
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: spring_boot_version
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: spring_boot_version
    compile(group: 'org.springframework', name: 'spring-context-support') {
        exclude(module: 'quartz')
    }
    compile group: 'javax.mail', name: 'mail', version: javax_mail_version

    compile group: 'com.google.guava', name: 'guava', version: guava_version
    compile group: 'com.google.guava', name: 'guava-testlib', version: guava_version
    compile group: 'org.mnode.ical4j', name: 'ical4j', version: ical4j_version

    compile group: 'org.postgresql', name: 'postgresql', version: postgresql_version
    compile group: 'fr.ippon.spark.metrics', name: 'metrics-spark-reporter', version: metrics_spark_reporter_version
    compile group: 'org.springframework.security.extensions', name: 'spring-security-saml2-core', version: spring_security_saml_version
    compile group: 'org.jsoup', name: 'jsoup', version: jsoup_version
    compile group: 'org.imgscalr', name: 'imgscalr-lib', version: imgscalr_version
    compile group: 'com.rometools', name: 'rome', version: rome_version
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: httpclient_version
    compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: httpclient_version
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: httpclient_version
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: jackson_dataformat_csv_version
    compile group: 'com.rometools', name: 'rome-fetcher', version: '1.5.1'
    compile group: 'com.github.slugify', name: 'slugify', version: slugify_version
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: io_jsonwebtoken_version
    compile group: 'redis.clients', name: 'jedis', version: jedis_version

    compile group: 'org.slf4j', name:'jcl-over-slf4j', version: '1.7.7'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'com.rometools', name: 'rome', version: '1.5.1'

    compile group: 'io.github.kobylynskyi', name: 'graphql-java-codegen', version: '3.0.0'

    errorprone group: 'com.google.errorprone', name:'error_prone_core', version: error_prone_core_version

    testCompile group: 'com.jayway.awaitility', name: 'awaitility', version: awaility_version
    testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: json_path_version
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: spring_boot_version
    testCompile group: 'org.assertj', name: 'assertj-core', version: assertj_core_version
    testCompile group: 'junit', name: 'junit', version: junit_version
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockito_version
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: hamcrest_version
    testCompile group: 'com.icegreen', name: 'greenmail', version: greenmail_version
    testCompile group: 'org.mock-server', name: 'mockserver-netty', version: mockserver_version
}

// Check for required properties
tasks.withType(PublishToMavenRepository) { task ->
   task.doFirst {
     ['base_url', 'username', 'password'].collect { "opintoni_artifactory_$it" }.each {
       if (!project.hasProperty(it)) {
           def msg = """
         |Missing project property: $it
         |
         |Configure Artifactory connection in file: \$USER_HOME/.gradle/gradle.properties
         |
         |opintoni_artifactory_base_url=<base url>
         |opintoni_artifactory_username=<username>
         |opintoni_artifactory_password=<password>
         |
         |Or provide with command line args like:
         |
         |-Popintoni_artifactory_base_url=<base url> -Popintoni_artifactory_username=<username> -Popintoni_artifactory_password=<password>
       """.stripMargin()
           throw new GradleException(msg)
       }
     }
   }
}

publishing {
  //
  // What is published, i.e. build artifacts and their names.
  //
  publications {
    maven(MavenPublication) {
      groupId 'fi.helsinki.opintoni'
      artifactId 'opintoni'
      version version
      from components.java
    }
  }

  //
  // Where to publish, i.e. repository connection information.
  //
  repositories {
    maven {
      credentials {
        if (project.hasProperty("opintoni_artifactory_username")) {
          username opintoni_artifactory_username
        }
        if (project.hasProperty("opintoni_artifactory_password")) {
          password opintoni_artifactory_password
        }
        if(project.hasProperty("opintoni_artifactory_base_url")) {
          if (version.endsWith('SNAPSHOT')) {
            url "${opintoni_artifactory_base_url}/libs-snapshot-local"
          } else {
            url "${opintoni_artifactory_base_url}/libs-release-local"
          }
        }
      }
    }
  }
}

tasks.withType(PublishToMavenRepository) { it.dependsOn test }
publish.dependsOn bootJar

task checkstyle {
    dependsOn checkstyleMain
    dependsOn checkstyleTest
}

test.dependsOn "checkstyle"

task storeDeployInformationToFile {
    doLast {
        def props = new Properties()
        file("gradle.properties").withInputStream { stream -> props.load(stream) }

        def deployProps = [VERSION: props["version"], ENVIRONMENT: environment]
        def content = deployProps.collect { key, value -> "$key=$value" }.join('\n')
        file("ci-deploy.properties").write(content)
    }
}

createReleaseTag.dependsOn storeDeployInformationToFile

tasks.create(name: 'installPrepushHook') {
    doLast {
        Runtime.getRuntime().exec("chmod -R +x .git/hooks/")
    }
}

task installGitHooks(type: Copy) {
    from '.'
    into '.git/hooks/'
    include 'pre-push-for-git.sh'
    rename ('pre-push-for-git.sh','pre-push')
}

installPrepushHook.dependsOn installGitHooks

gitProperties {
    gitRepositoryRoot = rootProject.file('.')
    keys = ['git.branch','git.commit.id','git.commit.time']
    dateFormat = "yyyy-MM-dd HH:mm:ssZ"
    dateFormatTimeZone = 'GMT'
}

clean.dependsOn installGitHooks

graphqlCodegen {
    // config options: https://github.com/kobylynskyi/graphql-java-codegen/blob/master/docs/codegen-options.md
    graphqlSchemas.includePattern = "sisu\\.schema\\.graphql"
    outputDir = new File("$buildDir/generated")
    packageName = "fi.helsinki.opintoni.integration.studyregistry.sisu.model"
    apiPackageName = "fi.helsinki.opintoni.integration.studyregistry.sisu.api"
    generateClient = true
    customAnnotationsMapping = [
        DateTime: ["@com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = com.example.json.EpochMillisScalarDeserializer.class)"]
    ]
    modelNameSuffix = "TO"
}

// Automatically generate GraphQL code on project build:
compileJava.dependsOn 'graphqlCodegen'

// Add generated sources to project source sets:
sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated"
        }
    }
}

